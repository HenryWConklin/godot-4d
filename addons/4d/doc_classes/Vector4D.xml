<?xml version="1.0" encoding="UTF-8" ?>
<class name="Vector4D" inherits="Object" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Singleton with extra math functions for Vector4.
	</brief_description>
	<description>
		Vector4D provides extra math functions for [Vector4], supplementing the functions Godot provides in Vector4.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="angle_to" qualifiers="static">
			<return type="float" />
			<param index="0" name="from" type="Vector4" />
			<param index="1" name="to" type="Vector4" />
			<description>
				Returns the unsigned minimum angle between the given vectors, in radians.
			</description>
		</method>
		<method name="bounce" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<param index="1" name="normal" type="Vector4" />
			<description>
				Returns [param vector] "bounced off" from a hyperplane defined by the [param normal] vector.
			</description>
		</method>
		<method name="bounce_ratio" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<param index="1" name="normal" type="Vector4" />
			<param index="2" name="bounce_ratio" type="float" />
			<description>
				Returns [param vector] "bounced off" from a hyperplane defined by the [param normal] vector with the given [param bounce_ratio] defining the bounciness. For physical bouncing, realistic values are on a range of [code]0.0[/code] to [code]1.0[/code]. A ratio of [code]0.0[/code] is equivalent to [method slide], while a ratio of [code]1.0[/code] is equivalent to [method bounce].
			</description>
		</method>
		<method name="cross" qualifiers="static">
			<return type="float" />
			<param index="0" name="a" type="Vector4" />
			<param index="1" name="b" type="Vector4" />
			<description>
				Returns the 4D analog of the cross product for [param a] and [param b]. This is the unsigned area of the parallelogram formed by the two vectors.
				[b]Note:[/b] The cross product is not defined in 4D mathematically. The 3D cross product has 2 properties, the result is perpendicular to the inputs, and the result has a magnitude equal to the area of the parallelogram formed by the inputs. This method provides the second property, but not the first, like [method Vector2.cross]. See also [method perpendicular] if you need a perpendicular vector like the 3D cross product (requires three input vectors).
			</description>
		</method>
		<method name="from_3d" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector3" />
			<description>
				Converts a [Vector3] to a [Vector4] with the W component set to 0.
			</description>
		</method>
		<method name="limit_length" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<param index="1" name="length" type="float" default="1.0" />
			<description>
				Returns [param vector] with a maximum length by limiting its length to [param length].
			</description>
		</method>
		<method name="move_toward" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="from" type="Vector4" />
			<param index="1" name="to" type="Vector4" />
			<param index="2" name="delta" type="float" />
			<description>
				Returns [param from] moved toward [param to] by the fixed [param delta] amount. Will not go past the final value.
			</description>
		</method>
		<method name="perpendicular" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="a" type="Vector4" />
			<param index="1" name="b" type="Vector4" />
			<param index="2" name="c" type="Vector4" />
			<description>
				Given three 4D vectors, find a new 4D vector that is perpendicular to all three. The input vectors must be linearly independent, otherwise a zero vector will be returned. This is similar to the 3D cross product that finds a vector perpendicular to two input vectors. The convention followed by this method is that if it's given +X, +Y, and +Z as inputs in that order, it will return +W, similar to the 3D cross product of +X and +Y returning +Z.
				[b]Note:[/b] The 3D cross product has 2 properties, the result is perpendicular to the inputs, and the result has a magnitude equal to the area of the parallelogram formed by the inputs. This method provides the first property, but not the second, like [method Vector2.orthogonal]. See also [method cross] for the 4D analog of the cross product between two vectors which returns a scalar representing the unsigned area of the parallelogram formed by the two vectors, similar to the 2D cross product [method Vector2.cross].
			</description>
		</method>
		<method name="project" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<param index="1" name="on_normal" type="Vector4" />
			<description>
				Returns [param vector] projected onto the vector [param on_normal].
			</description>
		</method>
		<method name="reflect" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<param index="1" name="normal" type="Vector4" />
			<description>
				Returns [param vector] reflected from a hyperplane defined by the [param normal] vector.
			</description>
		</method>
		<method name="slide" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<param index="1" name="normal" type="Vector4" />
			<description>
				Returns the component of [param vector] along a hyperplane defined by the [param normal] vector.
			</description>
		</method>
		<method name="to_3d" qualifiers="static">
			<return type="Vector3" />
			<param index="0" name="vector" type="Vector4" />
			<description>
				Converts a [Vector4] to a [Vector3] by discarding the W component.
			</description>
		</method>
	</methods>
</class>
