<?xml version="1.0" encoding="UTF-8" ?>
<class name="Transform4D" inherits="RefCounted" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../../../doc/class.xsd">
	<brief_description>
		Class for working with 4D transformations.
	</brief_description>
	<description>
		Transform4D is a 4x5 matrix used for 4D transformations (4 rows and 5 columns). It is composed of a [Basis4D] matrix that can handle rotation, scale, and shearing, and a [Vector4] representing the origin position.
		In the GDScript bindings, the [Transform4D] class is a wrapper that provides two types of binding for the internal Transform4D struct methods. If instanced, you get a RefCounted object, which is easier to work with, but uses more memory and is pass-by-reference. Or, you can use the static methods, which are harder to work with but use less memory Since there is no Variant data type with at least 20 float values, all methods pass a Transform4D as either a PackedRealArray or a separate [Basis4D] and [Vector4] (with the basis passed as a [Projection]). The static methods are named with the prefix "array_" or "proj_" depending on their inputs to distinguish them from the instance methods.
		Since Godot cannot return multiple values from a function, all transform data will be returned as a [Basis4D] or a [Vector4]. For operations that need to return both, you must call multiple functions.
		To compose [Transform4D] structures together, use [method Basis4D.compose] on the basis matrices, then run [method Basis4D.xform] on the child's origin vector and add it to the parent's origin vector.
		For more information, read the "Matrices and transforms" documentation article.
	</description>
	<tutorials>
		<link title="Math documentation index">$DOCS_URL/tutorials/math/index.html</link>
		<link title="Matrices and transforms">$DOCS_URL/tutorials/math/matrices_and_transforms.html</link>
		<link title="Matrix Transform Demo">https://godotengine.org/asset-library/asset/584</link>
	</tutorials>
	<methods>
		<method name="array_compose" qualifiers="static">
			<return type="PackedFloat32Array" />
			<param index="0" name="parent_array" type="PackedFloat32Array" />
			<param index="1" name="child_array" type="PackedFloat32Array" />
			<description>
				Composes two [Transform4D]s represented by [param parent_array] and [param child_array] into a single [PackedFloat32Array] or [PackedFloat64Array] representing a [Transform4D]. The arrays should have 20 numbers, and must have at least 16 numbers. This is the same as multiplying the transforms.
			</description>
		</method>
		<method name="array_from_3d" qualifiers="static">
			<return type="PackedFloat32Array" />
			<param index="0" name="from_3d" type="Transform3D" />
			<description>
				Converts a [Transform3D] to a [PackedFloat32Array] or [PackedFloat64Array] representing a [Transform4D]. The array will have 20 numbers.
			</description>
		</method>
		<method name="array_inverse" qualifiers="static">
			<return type="PackedFloat32Array" />
			<param index="0" name="transform" type="PackedFloat32Array" />
			<description>
				Inverts a [Transform4D] represented by [param transform] as a [PackedFloat32Array] or [PackedFloat64Array] and returns the result as a [PackedFloat32Array] or [PackedFloat64Array]. The input array should have 20 numbers, and must have at least 16 numbers. The returned array will have 20 numbers.
			</description>
		</method>
		<method name="array_is_equal_approx" qualifiers="static">
			<return type="bool" />
			<param index="0" name="array_a" type="PackedFloat32Array" />
			<param index="1" name="array_b" type="PackedFloat32Array" />
			<description>
				Returns [code]true[/code] if the [Transform4D] defined by [param array_a] is approximately equal to the [Transform4D] defined by [param array_b], by running [method @GlobalScope.is_equal_approx] on each component.
			</description>
		</method>
		<method name="array_to_3d" qualifiers="static">
			<return type="Transform3D" />
			<param index="0" name="from_array" type="PackedFloat32Array" />
			<param index="1" name="orthonormalized" type="bool" />
			<description>
				Converts a [PackedFloat32Array] or [PackedFloat64Array] representing a [Transform4D] to a [Transform3D] by discarding all W components. If [param orthonormalized] is [code]true[/code], the resulting [Transform3D] will have an orthonormal basis.
			</description>
		</method>
		<method name="array_translated_local" qualifiers="static">
			<return type="PackedFloat32Array" />
			<param index="0" name="array" type="PackedFloat32Array" />
			<param index="1" name="translation" type="Vector4" />
			<description>
				Translates the [Transform4D] defined by [param array] by the given [param translation] vector in local space. The input array should have 20 numbers, and must have at least 16 numbers. The returned array will have 20 numbers.
			</description>
		</method>
		<method name="array_xform" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="transform" type="PackedFloat32Array" />
			<param index="1" name="child_vector" type="Vector4" />
			<description>
				Transforms the [param child_vector] [Vector4] from the local space of the [Transform4D] defined by [param transform] to global space.
			</description>
		</method>
		<method name="array_xform_basis" qualifiers="static">
			<return type="Projection" />
			<param index="0" name="transform" type="PackedFloat32Array" />
			<param index="1" name="child_basis" type="Projection" />
			<description>
				Transforms the [param child_basis] [Basis4D] from the local space of the [Transform4D] defined by [param transform] to global space.
			</description>
		</method>
		<method name="array_xform_inv" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="transform" type="PackedFloat32Array" />
			<param index="1" name="vector" type="Vector4" />
			<description>
				Inversely transforms the [param vector] [Vector4] from the global space of the [Transform4D] defined by [param transform] to local space.
			</description>
		</method>
		<method name="array_xform_inv_basis" qualifiers="static">
			<return type="Projection" />
			<param index="0" name="transform" type="PackedFloat32Array" />
			<param index="1" name="basis" type="Projection" />
			<description>
				Inversely transforms the [param basis] [Basis4D] from the global space of the [Transform4D] defined by [param transform] to local space.
			</description>
		</method>
		<method name="array_xform_inv_many" qualifiers="static">
			<return type="PackedVector4Array" />
			<param index="0" name="transform" type="PackedFloat32Array" />
			<param index="1" name="vectors" type="PackedVector4Array" />
			<description>
				Inversely transforms the [param vectors] [PackedVector4Array] from the global space of the [Transform4D] defined by [param transform] to local space.
			</description>
		</method>
		<method name="array_xform_many" qualifiers="static">
			<return type="PackedVector4Array" />
			<param index="0" name="transform" type="PackedFloat32Array" />
			<param index="1" name="child_vectors" type="PackedVector4Array" />
			<description>
				Transforms the [param child_vectors] [PackedVector4Array] from the local space of the [Transform4D] defined by [param transform] to global space.
			</description>
		</method>
		<method name="array_xform_transposed" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="transform" type="PackedFloat32Array" />
			<param index="1" name="vector" type="Vector4" />
			<description>
				Transforms the [param vector] [Vector4] by the transpose of the [Transform4D] defined by [param transform]. If the [param transform] is orthonormal, this inversely transforms the vector like [method xform_inv].
			</description>
		</method>
		<method name="array_xform_transposed_basis" qualifiers="static">
			<return type="Projection" />
			<param index="0" name="transform" type="PackedFloat32Array" />
			<param index="1" name="basis" type="Projection" />
			<description>
				Transforms the [param basis] [Basis4D] by the transpose of the [Transform4D] defined by [param transform]. If the [param transform] is orthonormal, this inversely transforms the basis like [method xform_inv_basis].
			</description>
		</method>
		<method name="array_xform_transposed_many" qualifiers="static">
			<return type="PackedVector4Array" />
			<param index="0" name="transform" type="PackedFloat32Array" />
			<param index="1" name="vectors" type="PackedVector4Array" />
			<description>
				Transforms the [param vectors] [PackedVector4Array] by the transpose of the [Transform4D] defined by [param transform]. If the [param transform] is orthonormal, this inversely transforms the vectors like [method xform_inv_many].
			</description>
		</method>
		<method name="compose" qualifiers="const">
			<return type="Transform4D" />
			<param index="0" name="child_transform" type="Transform4D" />
			<description>
				Composes this [Transform4D] with [param child_transform] and returns the result as a new [Transform4D].
			</description>
		</method>
		<method name="copy" qualifiers="const">
			<return type="Transform4D" />
			<description>
				Returns a copy of this [Transform4D].
			</description>
		</method>
		<method name="determinant" qualifiers="const">
			<return type="float" />
			<description>
				Returns the determinant of the [Basis4D] matrix inside this [Transform4D]. If the basis is uniformly scaled, its determinant is the scale to the fourth power (ex: scale of 2, determinant of [code]2*2*2*2[/code] or 16).
			</description>
		</method>
		<method name="from_3d" qualifiers="static">
			<return type="Transform4D" />
			<param index="0" name="from_3d" type="Transform3D" />
			<description>
				Converts a 3D transform to a 4D transform. The resulting transform will have the W components set to the identity values.
			</description>
		</method>
		<method name="from_array" qualifiers="static">
			<return type="Transform4D" />
			<param index="0" name="from_array" type="PackedFloat32Array" />
			<description>
				Constructs a [Transform4D] from a [PackedFloat32Array] or [PackedFloat64Array] representing a [Transform4D]. The array should have 20 numbers, and must have at least 16 numbers.
			</description>
		</method>
		<method name="from_basis" qualifiers="static">
			<return type="Transform4D" />
			<param index="0" name="basis" type="Projection" />
			<param index="1" name="origin" type="Vector4" />
			<description>
				Constructs a [Transform4D] from a [Projection] representing the basis and optionally a [Vector4] representing the origin.
			</description>
		</method>
		<method name="from_numbers" qualifiers="static">
			<return type="Transform4D" />
			<param index="0" name="xx" type="float" />
			<param index="1" name="xy" type="float" />
			<param index="2" name="xz" type="float" />
			<param index="3" name="xw" type="float" />
			<param index="4" name="yx" type="float" />
			<param index="5" name="yy" type="float" />
			<param index="6" name="yz" type="float" />
			<param index="7" name="yw" type="float" />
			<param index="8" name="zx" type="float" />
			<param index="9" name="zy" type="float" />
			<param index="10" name="zz" type="float" />
			<param index="11" name="zw" type="float" />
			<param index="12" name="wx" type="float" />
			<param index="13" name="wy" type="float" />
			<param index="14" name="wz" type="float" />
			<param index="15" name="ww" type="float" />
			<param index="16" name="ox" type="float" />
			<param index="17" name="oy" type="float" />
			<param index="18" name="oz" type="float" />
			<param index="19" name="ow" type="float" />
			<description>
				Constructs a [Transform4D] from 20 individual float values in column-major order. The first 16 values are used to construct the [Basis4D] matrix, and the last 4 values are used to construct the origin [Vector4]. The order is [code]xx, yx, zx, wx, xy, yy, zy, wy, xz, yz, zz, wz, xw, yw, zw, ww, ox, oy, oz, ow[/code].
			</description>
		</method>
		<method name="from_vectors" qualifiers="static">
			<return type="Transform4D" />
			<param index="0" name="x" type="Vector4" />
			<param index="1" name="y" type="Vector4" />
			<param index="2" name="z" type="Vector4" />
			<param index="3" name="w" type="Vector4" />
			<param index="4" name="origin" type="Vector4" />
			<description>
				Constructs a [Transform4D] from 4 [Vector4]s representing the basis vectors and the origin.
			</description>
		</method>
		<method name="get_rotation" qualifiers="const">
			<return type="Euler4D" />
			<description>
				Returns the rotation of the [Basis4D] matrix inside this [Transform4D] as an [Euler4D] in radians.
			</description>
		</method>
		<method name="get_rotation_degrees" qualifiers="const">
			<return type="Euler4D" />
			<description>
				Returns the rotation of the [Basis4D] matrix inside this [Transform4D] as an [Euler4D] in degrees.
			</description>
		</method>
		<method name="get_scale" qualifiers="const">
			<return type="Vector4" />
			<description>
				Returns the scale of the [Basis4D] matrix inside this [Transform4D]. If flipped, the W component will be negative.
			</description>
		</method>
		<method name="get_scale_abs" qualifiers="const">
			<return type="Vector4" />
			<description>
				Returns the absolute scale of the [Basis4D] matrix inside this [Transform4D].
			</description>
		</method>
		<method name="get_uniform_scale" qualifiers="const">
			<return type="float" />
			<description>
				Returns the uniform scale of the [Basis4D] matrix inside this [Transform4D]. If flipped, the scale will be negative.
			</description>
		</method>
		<method name="inverse" qualifiers="const">
			<return type="Transform4D" />
			<description>
				Returns the inverse of this [Transform4D]. This is the 4D equivalent of [method Transform3D.affine_inverse].
			</description>
		</method>
		<method name="inverse_basis" qualifiers="const">
			<return type="Transform4D" />
			<description>
				Calculates the inverse of the [Basis4D] matrix inside this [Transform4D] and returns it inside of a new [Transform4D] along with the original origin unaffected.
			</description>
		</method>
		<method name="inverse_transposed" qualifiers="const">
			<return type="Transform4D" />
			<description>
				Returns the inverse of the transpose of this [Transform4D]. If the basis is orthonormal, this is the same as the inverse.
			</description>
		</method>
		<method name="is_equal_approx" qualifiers="const">
			<return type="bool" />
			<param index="0" name="transform" type="Transform4D" />
			<description>
				Returns [code]true[/code] if this [Transform4D] and [param other] are approximately equal, by running [method @GlobalScope.is_equal_approx] on each component.
			</description>
		</method>
		<method name="is_equal_exact" qualifiers="const">
			<return type="bool" />
			<param index="0" name="transform" type="Transform4D" />
			<description>
				Returns [code]true[/code] if this [Transform4D] and [param other] are exactly equal, by checking each component.
			</description>
		</method>
		<method name="lerp" qualifiers="const">
			<return type="Transform4D" />
			<param index="0" name="transform" type="Transform4D" />
			<param index="1" name="weight" type="float" />
			<description>
				Performs linear interpolation between this [Transform4D] and [param transform] by a given [param weight] amount. The result will be normalized.
			</description>
		</method>
		<method name="orthogonalize">
			<return type="void" />
			<description>
				Orthogonalizes the [Basis4D] matrix inside this [Transform4D]. This ensures that the basis vectors are all perpendicular to each other. This modifies the original transform.
			</description>
		</method>
		<method name="orthogonalized" qualifiers="const">
			<return type="Transform4D" />
			<description>
				Returns a copy of this [Transform4D] with the [Basis4D] matrix orthogonalized. This ensures that the basis vectors are all perpendicular to each other.
			</description>
		</method>
		<method name="orthonormalize">
			<return type="void" />
			<description>
				Orthonormalizes the [Basis4D] matrix inside this [Transform4D]. This ensures that the basis vectors are all perpendicular to each other and have a length of 1. This modifies the original transform.
			</description>
		</method>
		<method name="orthonormalized" qualifiers="const">
			<return type="Transform4D" />
			<description>
				Returns a copy of this [Transform4D] with the [Basis4D] matrix orthonormalized. This ensures that the basis vectors are all perpendicular to each other and have a length of 1.
			</description>
		</method>
		<method name="proj_compose_to_array" qualifiers="static">
			<return type="PackedFloat32Array" />
			<param index="0" name="parent_basis" type="Projection" />
			<param index="1" name="parent_origin" type="Vector4" />
			<param index="2" name="child_basis" type="Projection" />
			<param index="3" name="child_origin" type="Vector4" />
			<description>
				Composes two [Transform4D]s defined by [param parent_basis], [param parent_origin], [param child_basis], and [param child_origin] into a single [PackedFloat32Array] or [PackedFloat64Array] representing a [Transform4D]. The arrays should have 20 numbers, and must have at least 16 numbers. This is the same as multiplying the transforms.
			</description>
		</method>
		<method name="proj_from_3d_basis" qualifiers="static">
			<return type="Projection" />
			<param index="0" name="from_3d" type="Transform3D" />
			<description>
				Constructs the basis [Basis4D] part of a [Transform4D] from a [param from_3d] [Basis] 3D matrix. The XYZ 3x3 portion is set to the [param basis_3d] matrix, and all W components are set to identity.
			</description>
		</method>
		<method name="proj_from_3d_origin" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="from_3d" type="Transform3D" />
			<description>
				Constructs the origin [Vector4] part of a [Transform4D] from a [param from_3d] [Transform3D] matrix. The W component of the origin is set to 0.
			</description>
		</method>
		<method name="proj_from_array_basis" qualifiers="static">
			<return type="Projection" />
			<param index="0" name="from_array" type="PackedFloat32Array" />
			<description>
				Constructs the basis [Basis4D] part of a [Transform4D] from a [param from_array] [PackedFloat32Array] or [PackedFloat64Array] representing a [Transform4D]. The array should have 20 numbers, and must have at least 16 numbers.
			</description>
		</method>
		<method name="proj_from_array_origin" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="from_array" type="PackedFloat32Array" />
			<description>
				Constructs the origin [Vector4] part of a [Transform4D] from a [param from_array] [PackedFloat32Array] or [PackedFloat64Array] representing a [Transform4D]. The array must have 20 numbers.
			</description>
		</method>
		<method name="proj_inverse_origin_with_inverse_basis" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="inverse_basis" type="Projection" />
			<param index="1" name="origin" type="Vector4" />
			<description>
				Returns the origin vector of the inverse of the [Transform4D] defined by [param inverse_basis] and [param origin].
				To invert a [Transform4D] efficiently in 2 lines of code, use [method Basis4D.inverse] to invert the [Basis4D], and then pass the inverted [Basis4D] and original [param origin] to this method to get the inverted origin.
			</description>
		</method>
		<method name="proj_inverse_origin_with_regular_basis" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="basis" type="Projection" />
			<param index="1" name="origin" type="Vector4" />
			<description>
				Returns the origin vector of the inverse of the [Transform4D] defined by [param basis] and [param origin]. This is simpler than [method inverse_origin_with_inverse_basis] if you don't need the [Basis4D] inverted, but slower if you need both.
			</description>
		</method>
		<method name="proj_inverse_to_array" qualifiers="static">
			<return type="PackedFloat32Array" />
			<param index="0" name="basis" type="Projection" />
			<param index="1" name="origin" type="Vector4" />
			<description>
				Inverts a [Transform4D] defined by [param basis] and [param origin] and returns the result as a [PackedFloat32Array] or [PackedFloat64Array]. The returned array will have 20 numbers.
			</description>
		</method>
		<method name="proj_is_equal_approx" qualifiers="static">
			<return type="bool" />
			<param index="0" name="parent_basis" type="Projection" />
			<param index="1" name="parent_origin" type="Vector4" />
			<param index="2" name="child_basis" type="Projection" />
			<param index="3" name="child_origin" type="Vector4" />
			<description>
				Returns [code]true[/code] if the [Transform4D] defined by [param parent_basis] and [param parent_origin] is approximately equal to the [Transform4D] defined by [param child_basis] and [param child_origin], by running [method @GlobalScope.is_equal_approx] on each component.
			</description>
		</method>
		<method name="proj_to_3d" qualifiers="static">
			<return type="Transform3D" />
			<param index="0" name="from_basis" type="Projection" />
			<param index="1" name="from_origin" type="Vector4" />
			<param index="2" name="orthonormalized" type="bool" />
			<description>
				Converts a [Transform4D] defined by [param from_basis] and [param from_origin] to a [Transform3D] by discarding all W components. If [param orthonormalized] is [code]true[/code], the resulting [Transform3D] will have an orthonormal basis.
			</description>
		</method>
		<method name="proj_to_array" qualifiers="static">
			<return type="PackedFloat32Array" />
			<param index="0" name="from_basis" type="Projection" />
			<param index="1" name="from_origin" type="Vector4" />
			<description>
				Converts a [Transform4D] defined by [param from_basis] and [param from_origin] to a [PackedFloat32Array] or [PackedFloat64Array]. The array will have 20 numbers.
			</description>
		</method>
		<method name="proj_translated_local" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="basis" type="Projection" />
			<param index="1" name="origin" type="Vector4" />
			<param index="2" name="translation" type="Vector4" />
			<description>
				Translates the [Transform4D] defined by [param basis] and [param origin] by the given [param translation] vector in local space.
			</description>
		</method>
		<method name="proj_translated_local_to_array" qualifiers="static">
			<return type="PackedFloat32Array" />
			<param index="0" name="basis" type="Projection" />
			<param index="1" name="origin" type="Vector4" />
			<param index="2" name="translation" type="Vector4" />
			<description>
				Translates the [Transform4D] defined by [param basis] and [param origin] by the given [param translation] vector in local space and returns the result as a [PackedFloat32Array] or [PackedFloat64Array]. The returned array will have 20 numbers.
			</description>
		</method>
		<method name="proj_xform" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="parent_basis" type="Projection" />
			<param index="1" name="parent_origin" type="Vector4" />
			<param index="2" name="child_vector" type="Vector4" />
			<description>
				Transforms the [param child_vector] [Vector4] from the local space of the [Transform4D] defined by [param parent_basis] and [param parent_origin] to global space.
			</description>
		</method>
		<method name="proj_xform_basis" qualifiers="static">
			<return type="Projection" />
			<param index="0" name="parent_basis" type="Projection" />
			<param index="1" name="parent_origin" type="Vector4" />
			<param index="2" name="child_basis" type="Projection" />
			<description>
				Transforms the [param child_basis] [Basis4D] from the local space of the [Transform4D] defined by [param parent_basis] and [param parent_origin] to global space.
			</description>
		</method>
		<method name="proj_xform_inv" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="parent_basis" type="Projection" />
			<param index="1" name="parent_origin" type="Vector4" />
			<param index="2" name="vector" type="Vector4" />
			<description>
				Inversely transforms the [param vector] [Vector4] from the global space of the [Transform4D] defined by [param parent_basis] and [param parent_origin] to local space.
			</description>
		</method>
		<method name="proj_xform_inv_basis" qualifiers="static">
			<return type="Projection" />
			<param index="0" name="parent_basis" type="Projection" />
			<param index="1" name="parent_origin" type="Vector4" />
			<param index="2" name="basis" type="Projection" />
			<description>
				Inversely transforms the [param basis] [Basis4D] from the global space of the [Transform4D] defined by [param parent_basis] and [param parent_origin] to local space.
			</description>
		</method>
		<method name="proj_xform_inv_many" qualifiers="static">
			<return type="PackedVector4Array" />
			<param index="0" name="parent_basis" type="Projection" />
			<param index="1" name="parent_origin" type="Vector4" />
			<param index="2" name="vectors" type="PackedVector4Array" />
			<description>
				Inversely transforms the [param vectors] [PackedVector4Array] from the global space of the [Transform4D] defined by [param parent_basis] and [param parent_origin] to local space.
			</description>
		</method>
		<method name="proj_xform_many" qualifiers="static">
			<return type="PackedVector4Array" />
			<param index="0" name="parent_basis" type="Projection" />
			<param index="1" name="parent_origin" type="Vector4" />
			<param index="2" name="child_vectors" type="PackedVector4Array" />
			<description>
				Transforms the [param child_vectors] [PackedVector4Array] from the local space of the [Transform4D] defined by [param parent_basis] and [param parent_origin] to global space.
			</description>
		</method>
		<method name="proj_xform_transposed" qualifiers="static">
			<return type="Vector4" />
			<param index="0" name="parent_basis" type="Projection" />
			<param index="1" name="parent_origin" type="Vector4" />
			<param index="2" name="vector" type="Vector4" />
			<description>
				Transforms the [param vector] [Vector4] by the transpose of the [Transform4D] defined by [param parent_basis] and [param parent_origin]. If the [param parent_basis] is orthonormal, this inversely transforms the vector like [method xform_inv].
			</description>
		</method>
		<method name="proj_xform_transposed_basis" qualifiers="static">
			<return type="Projection" />
			<param index="0" name="parent_basis" type="Projection" />
			<param index="1" name="parent_origin" type="Vector4" />
			<param index="2" name="basis" type="Projection" />
			<description>
				Transforms the [param basis] [Basis4D] by the transpose of the [Transform4D] defined by [param parent_basis] and [param parent_origin]. If the [param parent_basis] is orthonormal, this inversely transforms the basis like [method xform_inv_basis].
			</description>
		</method>
		<method name="proj_xform_transposed_many" qualifiers="static">
			<return type="PackedVector4Array" />
			<param index="0" name="parent_basis" type="Projection" />
			<param index="1" name="parent_origin" type="Vector4" />
			<param index="2" name="vectors" type="PackedVector4Array" />
			<description>
				Transforms the [param vectors] [PackedVector4Array] by the transpose of the [Transform4D] defined by [param parent_basis] and [param parent_origin]. If the [param parent_basis] is orthonormal, this inversely transforms the vectors like [method xform_inv_many].
			</description>
		</method>
		<method name="rotate_bivector_magnitude">
			<return type="void" />
			<param index="0" name="bivector" type="AABB" />
			<description>
				Rotates the [Transform4D] by the given [param bivector] Bivector4D rotation exposed as an [AABB]. The length of the bivector is the angle of rotation in radians, while the direction of the bivector is the shadow of the rotation in the 6 bivector rotation planes. This is in parent-relative space, affecting both the position and rotation.
			</description>
		</method>
		<method name="rotate_bivector_magnitude_local">
			<return type="void" />
			<param index="0" name="bivector_local" type="AABB" />
			<description>
				Rotates the [Transform4D] by the given [param bivector_local] Bivector4D rotation exposed as an [AABB]. The length of the bivector is the angle of rotation in radians, while the direction of the bivector is the shadow of the rotation in the 6 bivector rotation planes. This is in local space, affecting only the rotation.
			</description>
		</method>
		<method name="rotate_global">
			<return type="void" />
			<param index="0" name="euler" type="Euler4D" />
			<description>
				Rotates the [Transform4D] in global space by the given [param euler] [Euler4D] rotation, affecting both the position and rotation.
			</description>
		</method>
		<method name="rotate_local">
			<return type="void" />
			<param index="0" name="euler" type="Euler4D" />
			<description>
				Rotates the [Transform4D] in local space by the given [param euler] [Euler4D] rotation, affecting only the rotation.
			</description>
		</method>
		<method name="rotate_rotor">
			<return type="void" />
			<param index="0" name="rotor" type="Rotor4D" />
			<description>
				Rotates the [Transform4D] by the given [param rotor] [Rotor4D] rotation in parent-relative space, affecting both the position and rotation.
			</description>
		</method>
		<method name="rotate_rotor_local">
			<return type="void" />
			<param index="0" name="rotor_local" type="Rotor4D" />
			<description>
				Rotates the [Transform4D] by the given [param rotor_local] [Rotor4D] rotation in local space, affecting only the rotation.
			</description>
		</method>
		<method name="rotated_global" qualifiers="const">
			<return type="Transform4D" />
			<param index="0" name="euler" type="Euler4D" />
			<description>
				Returns a copy of this [Transform4D] rotated in global space by the given [param euler] [Euler4D] rotation, affecting both the position and rotation.
			</description>
		</method>
		<method name="rotated_local" qualifiers="const">
			<return type="Transform4D" />
			<param index="0" name="euler" type="Euler4D" />
			<description>
				Returns a copy of this [Transform4D] rotated in local space by the given [param euler] [Euler4D] rotation, affecting only the rotation.
			</description>
		</method>
		<method name="scale_global">
			<return type="void" />
			<param index="0" name="scale" type="Vector4" />
			<description>
				Scales the [Transform4D] in global space by the given [param scale] [Vector4] scale, affecting both the position and scale.
			</description>
		</method>
		<method name="scale_local">
			<return type="void" />
			<param index="0" name="scale" type="Vector4" />
			<description>
				Scales the [Transform4D] in local space by the given [param scale] [Vector4] scale, affecting only the scale.
			</description>
		</method>
		<method name="scale_uniform_global">
			<return type="void" />
			<param index="0" name="scale" type="float" />
			<description>
				Scales the [Transform4D] in global space by the given [param scale] uniform scale, affecting both the position and scale.
			</description>
		</method>
		<method name="scale_uniform_local">
			<return type="void" />
			<param index="0" name="scale" type="float" />
			<description>
				Scales the [Transform4D] in local space by the given [param scale] uniform scale, affecting only the scale.
			</description>
		</method>
		<method name="scaled_global" qualifiers="const">
			<return type="Transform4D" />
			<param index="0" name="scale" type="Vector4" />
			<description>
				Returns a copy of this [Transform4D] scaled in global space by the given [param scale] [Vector4] scale, affecting both the position and scale.
			</description>
		</method>
		<method name="scaled_local" qualifiers="const">
			<return type="Transform4D" />
			<param index="0" name="scale" type="Vector4" />
			<description>
				Returns a copy of this [Transform4D] scaled in local space by the given [param scale] [Vector4] scale, affecting only the scale.
			</description>
		</method>
		<method name="scaled_uniform_global" qualifiers="const">
			<return type="Transform4D" />
			<param index="0" name="scale" type="float" />
			<description>
				Returns a copy of this [Transform4D] scaled in global space by the given [param scale] uniform scale, affecting both the position and scale.
			</description>
		</method>
		<method name="scaled_uniform_local" qualifiers="const">
			<return type="Transform4D" />
			<param index="0" name="scale" type="float" />
			<description>
				Returns a copy of this [Transform4D] scaled in local space by the given [param scale] uniform scale, affecting only the scale.
			</description>
		</method>
		<method name="set_rotation">
			<return type="void" />
			<param index="0" name="euler" type="Euler4D" />
			<description>
				Sets the rotation of the [Basis4D] matrix inside this [Transform4D] to the given [param euler] [Euler4D] in radians.
			</description>
		</method>
		<method name="set_rotation_bivector_magnitude">
			<return type="void" />
			<param index="0" name="bivector" type="AABB" />
			<description>
				Sets the rotation of the [Basis4D] matrix inside this [Transform4D] to the given [param bivector] Bivector4D rotation exposed as an [AABB]. The length of the bivector is the angle of rotation in radians, while the direction of the bivector is the shadow of the rotation in the 6 bivector rotation planes.
			</description>
		</method>
		<method name="set_rotation_degrees">
			<return type="void" />
			<param index="0" name="euler" type="Euler4D" />
			<description>
				Sets the rotation of the [Basis4D] matrix inside this [Transform4D] to the given [param euler] [Euler4D] in degrees.
			</description>
		</method>
		<method name="set_rotation_rotor">
			<return type="void" />
			<param index="0" name="rotor" type="Rotor4D" />
			<description>
				Sets the rotation of the [Basis4D] matrix inside this [Transform4D] to the given [param rotor] [Rotor4D] rotation.
			</description>
		</method>
		<method name="set_scale">
			<return type="void" />
			<param index="0" name="scale" type="Vector4" />
			<description>
				Sets the scale of the [Basis4D] matrix inside this [Transform4D] to the given [param scale] [Vector4]. The signs of the scale components will be normalized such that X, Y, and Z are positive, and W is either positive or negative depending on the sign of the determinant (negative if there is a flip).
			</description>
		</method>
		<method name="set_uniform_scale">
			<return type="void" />
			<param index="0" name="uniform_scale" type="float" />
			<description>
				Sets the scale of the [Basis4D] matrix inside this [Transform4D] to the given [param uniform_scale] uniform scale. A positive scale indicates no flip, while a negative scale indicates a flip.
			</description>
		</method>
		<method name="to_3d" qualifiers="const">
			<return type="Transform3D" />
			<param index="0" name="orthonormalized" type="bool" />
			<description>
				Converts this 4D transform to a 3D transform. The W components are discarded. If [param orthonormalized] is [code]true[/code], the resulting [Transform3D] will have an orthonormal basis.
			</description>
		</method>
		<method name="to_array" qualifiers="const">
			<return type="PackedFloat32Array" />
			<description>
				Converts this [Transform4D] to a [PackedFloat32Array] or [PackedFloat64Array]. The array will have 20 numbers.
			</description>
		</method>
		<method name="translate_local">
			<return type="void" />
			<param index="0" name="translation" type="Vector4" />
			<description>
				Translates the [Transform4D] by the given [param translation] vector in local space.
			</description>
		</method>
		<method name="translated_local" qualifiers="const">
			<return type="Transform4D" />
			<param index="0" name="translation" type="Vector4" />
			<description>
				Returns a copy of this [Transform4D] translated by the given [param translation] vector in local space.
			</description>
		</method>
		<method name="xform" qualifiers="const">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<description>
				Transforms the [param vector] [Vector4] from the local space of this [Transform4D] to global space.
			</description>
		</method>
		<method name="xform_basis" qualifiers="const">
			<return type="Projection" />
			<param index="0" name="basis" type="Projection" />
			<description>
				Transforms the [param basis] [Basis4D] from the local space of this [Transform4D] to global space.
			</description>
		</method>
		<method name="xform_inv" qualifiers="const">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<description>
				Inversely transforms the [param vector] [Vector4] from the global space of this [Transform4D] to local space.
			</description>
		</method>
		<method name="xform_inv_basis" qualifiers="const">
			<return type="Projection" />
			<param index="0" name="basis" type="Projection" />
			<description>
				Inversely transforms the [param basis] [Basis4D] from the global space of this [Transform4D] to local space.
			</description>
		</method>
		<method name="xform_inv_many" qualifiers="const">
			<return type="PackedVector4Array" />
			<param index="0" name="vectors" type="PackedVector4Array" />
			<description>
				Inversely transforms an array of [Vector4]s from the global space of this [Transform4D] to local space.
			</description>
		</method>
		<method name="xform_many" qualifiers="const">
			<return type="PackedVector4Array" />
			<param index="0" name="vectors" type="PackedVector4Array" />
			<description>
				Transforms an array of [Vector4]s from the local space of this [Transform4D] to global space.
			</description>
		</method>
		<method name="xform_transposed" qualifiers="const">
			<return type="Vector4" />
			<param index="0" name="vector" type="Vector4" />
			<description>
				Transforms the [param vector] [Vector4] by the transpose of this [Transform4D]. If the basis is orthonormal, this inversely transforms the vector like [method xform_inv].
			</description>
		</method>
		<method name="xform_transposed_basis" qualifiers="const">
			<return type="Projection" />
			<param index="0" name="basis" type="Projection" />
			<description>
				Transforms the [param basis] [Basis4D] by the transpose of this [Transform4D]. If the basis is orthonormal, this inversely transforms the basis like [method xform_inv_basis].
			</description>
		</method>
		<method name="xform_transposed_many" qualifiers="const">
			<return type="PackedVector4Array" />
			<param index="0" name="vectors" type="PackedVector4Array" />
			<description>
				Transforms an array of [Vector4]s by the transpose of this [Transform4D]. If the basis is orthonormal, this inversely transforms the vectors like [method xform_inv_many].
			</description>
		</method>
	</methods>
	<members>
		<member name="basis" type="Projection" setter="set_basis" getter="get_basis" default="Projection(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1)">
			The [Basis4D] matrix of this transform.
		</member>
		<member name="origin" type="Vector4" setter="set_origin" getter="get_origin" default="Vector4(0, 0, 0, 0)">
			The [Vector4] origin of this transform.
		</member>
	</members>
</class>
